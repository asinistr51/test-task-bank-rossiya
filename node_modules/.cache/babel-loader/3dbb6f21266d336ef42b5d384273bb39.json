{"ast":null,"code":"import { defineRange } from './calculator';\nexport const findIndexInDepositsList = (list, code) => {\n  if (code) {\n    var _list$deposits;\n\n    const index = (_list$deposits = list.deposits) === null || _list$deposits === void 0 ? void 0 : _list$deposits.findIndex(deposit => deposit.code === code);\n    return index;\n  }\n\n  return NaN;\n};\nexport const findIndexInDepositsParams = (list, period, code) => {\n  if (period) {\n    var _list$deposits2;\n\n    const index = (_list$deposits2 = list.deposits) === null || _list$deposits2 === void 0 ? void 0 : _list$deposits2.findIndex(deposit => deposit.code === code);\n    const paramList = list.deposits[index].param.map(value => value.period_from);\n    const periodIndex = defineRange(period, paramList);\n    return periodIndex;\n  }\n\n  return NaN;\n};","map":{"version":3,"sources":["/home/as1nistr/test-task-bank-rossiya/src/utils/findIndexInDepositsList.ts"],"names":["defineRange","findIndexInDepositsList","list","code","index","deposits","findIndex","deposit","NaN","findIndexInDepositsParams","period","paramList","param","map","value","period_from","periodIndex"],"mappings":"AACA,SAAQA,WAAR,QAA0B,cAA1B;AACA,OAAO,MAAMC,uBAAiC,GAAG,CAACC,IAAD,EAAqBC,IAArB,KAAsC;AACrF,MAAIA,IAAJ,EAAU;AAAA;;AACR,UAAMC,KAAK,qBAAGF,IAAI,CAACG,QAAR,mDAAG,eAAeC,SAAf,CAA0BC,OAAD,IAA0BA,OAAO,CAACJ,IAAR,KAAiBA,IAApE,CAAd;AACA,WAAOC,KAAP;AACD;;AACD,SAAOI,GAAP;AACD,CANM;AAQP,OAAO,MAAMC,yBAAmC,GAAG,CAACP,IAAD,EAAqBQ,MAArB,EAAqCP,IAArC,KAAsD;AACvG,MAAIO,MAAJ,EAAY;AAAA;;AACV,UAAMN,KAAK,sBAAGF,IAAI,CAACG,QAAR,oDAAG,gBAAeC,SAAf,CAA0BC,OAAD,IAA0BA,OAAO,CAACJ,IAAR,KAAiBA,IAApE,CAAd;AACA,UAAMQ,SAAS,GAAGT,IAAI,CAACG,QAAL,CAAcD,KAAd,EAAqBQ,KAArB,CAA2BC,GAA3B,CAA+BC,KAAK,IAAIA,KAAK,CAACC,WAA9C,CAAlB;AACA,UAAMC,WAAW,GAAGhB,WAAW,CAACU,MAAD,EAASC,SAAT,CAA/B;AACA,WAAOK,WAAP;AACD;;AACD,SAAOR,GAAP;AACD,CARM","sourcesContent":["import {DepositsList, DepositItem, FormState} from '../interfaces/interfaces'\nimport {defineRange} from './calculator'\nexport const findIndexInDepositsList: Function = (list: DepositsList, code: string) => {\n  if (code) {\n    const index = list.deposits?.findIndex((deposit: DepositItem) => deposit.code === code)\n    return index\n  }\n  return NaN\n}\n\nexport const findIndexInDepositsParams: Function = (list: DepositsList, period: string, code: string) => {\n  if (period) {\n    const index = list.deposits?.findIndex((deposit: DepositItem) => deposit.code === code)\n    const paramList = list.deposits[index].param.map(value => value.period_from)\n    const periodIndex = defineRange(period, paramList)\n    return periodIndex\n  }\n  return NaN\n}\n"]},"metadata":{},"sourceType":"module"}